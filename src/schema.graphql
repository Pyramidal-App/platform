scalar DateTime

enum CallOutcome {
  DIDNT_ANSWER
  NOT_INTERESTED
  SUCCESS
  DONT_CALL
}

enum TaskType {
  CALL
  VISIT
}

enum TaskStatus {
  PENDING
  COMPLETED
  OVERDUE
  CANCELLED
}

enum SearchOrderDirection {
  asc
  desc
}

interface Record {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

interface RecordPage {
  page: Int
  totalPages: Int
  recordsPerPage: Int
  total: Int
  data: [Record]!
}

type User {
  id: ID!
  name: String
  email: String!
  avatarUrl: String
  customers(input: CustomerSearchInput): CustomerPage!
  team: Team
  tasks(input: TaskSearchInput): TaskPage!
  notifications(read: Boolean, limit: Int): [Notification]!
}

type Customer implements Record {
  id: ID!
  slug: String!
  name: String!
  userId: ID!
  user: User!
  phoneNumbers: [PhoneNumber]!
  addresses: [Address]!
  calls(input: CallSearchInput): CallPage!
  tasks(input: TaskSearchInput): TaskPage!
  notes(input: NoteSearchInput): NotePage!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TaskPage implements RecordPage {
  page: Int
  totalPages: Int
  total: Int
  recordsPerPage: Int
  data: [Task]!
}

type CallPage implements RecordPage {
  page: Int
  totalPages: Int
  total: Int
  recordsPerPage: Int
  data: [Call]!
}

type PhoneNumber {
  id: ID!
  customers: [Customer]!
  countryCode: String!
  areaCode: String!
  number: String!
  displayValue: String!
}

type Address {
  id: ID!
  customer: Customer!
  label: String!
  googlePlaceId: String!
  lat: Float!
  lng: Float!
  notes: String
}

type TelemarketingSheet {
  id: ID!
  countryCode: Int!
  areaCode: Int!
  firstNumbers: Int!
  numberInfo: [TelemarketingSheetNumberInfo!]!
}

type TelemarketingSheetNumberInfo {
  lastNumbers: Int!
  hasContact: Boolean!
  teamHasContact: Boolean!
  hasPendingTasks: Boolean!
  dontCall: Boolean!
}

type Call implements Record {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  phoneNumber: PhoneNumber!
  customer: Customer!
  user: User!
  notes: [Note]!
  outcome: CallOutcome!
  dateTime: DateTime!
  displayOutcome: String!
}

type Note implements Record {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  customer: Customer
  phoneNumber: PhoneNumber
  call: Call
  body: String!
}

type Task implements Record {
  id: ID!
  customer: Customer!
  user: User!
  triggererCall: Call!
  taskType: TaskType!
  dueDate: DateTime!
  status: TaskStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CustomerPage implements RecordPage {
  page: Int
  totalPages: Int
  total: Int
  recordsPerPage: Int
  data: [Customer]!
}

type NotePage implements RecordPage {
  page: Int
  totalPages: Int
  total: Int
  recordsPerPage: Int
  data: [Note]!
}

type Team {
  id: ID!
  name: String!
  memberships: [TeamMembership]!
  members: [User]!
}

type TeamMembership {
  id: ID!
  team: Team!
  user: User!
  admin: Boolean
}

type Notification {
  id: ID!
  activateAt: DateTime
  createdAt: DateTime!
  userId: ID!
  user: User!
  read: Boolean!
  payload: Task!
}

type ArgentinaAreaCodeMatch {
  areaCode: String!
  province: String!
  matchedLocalities: [String]!
}

type UserAndToken {
  token: String!
  user: User!
}

type GooglePlace {
  googlePlaceId: ID!
  phoneNumber: PhoneNumber
  lat: Float!
  lng: Float!
}

type GenericActionResponse {
  success: Boolean!
}

input LogInWithGoogleInput {
  accessToken: String!
  idToken: String!
}

input TelemarketingSheetIdentifiers {
  countryCode: String!
  areaCode: String!
  firstNumbers: String!
}

input PhoneNumberIdentifiers {
  countryCode: String!
  areaCode: String!
  number: String!
}

enum CustomerSearchOrderIdentifier {
  createdAt
}

input CustomerSearchOrder {
  identifier: CustomerSearchOrderIdentifier!
  direction: SearchOrderDirection
}

input CustomerSearchFilters {
  phoneNumber: PhoneNumberIdentifiers,
  id: String
  inLimbo: Boolean
}

input CustomerSearchInput {
  page: Int
  recordsPerPage: Int
  limit: Int
  filters: CustomerSearchFilters
  orderBy: [CustomerSearchOrder]
}

enum NoteSearchOrderIdentifier {
  createdAt
}

input NoteSearchOrder {
  identifier: NoteSearchOrderIdentifier!
  direction: SearchOrderDirection
}

input NoteSearchInput {
  page: Int
  recordsPerPage: Int
  limit: Int
  orderBy: [NoteSearchOrder]
}

input CallSearchFilters {
  customerId: Int
}

enum CallSearchOrderIdentifier {
  createdAt
  dateTime
}

input CallSearchOrder {
  identifier: CallSearchOrderIdentifier
  direction: SearchOrderDirection
}

input CallSearchInput {
  page: Int
  recordsPerPage: Int
  limit: Int
  filters: CallSearchFilters
  orderBy: [CallSearchOrder]
}

enum TaskSearchOrderIdentifier {
  dueDate
  createdAt
}

input TaskSearchOrder {
  identifier: TaskSearchOrderIdentifier!
  direction: SearchOrderDirection
}

input TaskSearchFilters {
  customerId: ID
  userId: ID
  taskType: TaskType
  status: TaskStatus
  minCreatedAt: DateTime
  maxCreatedAt: DateTime
  minDueDate: DateTime
  maxDueDate: DateTime
}

input TaskSearchInput {
  page: Int
  recordsPerPage: Int
  limit: Int
  orderBy: [TaskSearchOrder]
  filters: TaskSearchFilters
}

input CustomerPhoneNumberInput {
  id: ID
  delete: Boolean
  countryCode: String
  areaCode: String
  number: String
}

input CreateCustomerInput {
  name: String!
  phoneNumbers: [CustomerPhoneNumberInput]
  addressGooglePlaceId: String
  addressLabel: String
  addressNotes: String
  addressLat: Float
  addressLng: Float
}

input UpdateCustomerInput {
  id: ID!
  name: String!
  phoneNumbers: [CustomerPhoneNumberInput]
}

input UpdateAddressInput {
  id: ID!
  googlePlaceId: String
  label: String
  notes: String
  lat: Float
  lng: Float
}

input CreateCallInput {
  phoneNumberId: ID!
  customerId: ID!
  outcome: CallOutcome!
  dateTime: DateTime!
  notes: String
}

input CreateTaskInput {
  customerId: ID!
  triggererCallId: ID
  taskType: TaskType!
  dueDate: DateTime
}

input CreateTeamInput {
  name: String!
  members: String!
}

input InviteToTeamInput {
  teamId: ID!
  email: String!
}

input UpdateCurrentUserInput {
  name: String!
}

input CreateNoteInput {
  contactId: ID!
  body: String!
}

type Mutation {
  logInWithGoogle(input: LogInWithGoogleInput!): UserAndToken!
  findOrCreateTelemarketingSheet(input: TelemarketingSheetIdentifiers!): TelemarketingSheet!
  updateAddress(input: UpdateAddressInput!): Address!
  createCall(input: CreateCallInput!): Call!
  createTeam(input: CreateTeamInput!): Team!
  inviteToTeam(input: InviteToTeamInput!): TeamMembership!
  updateCurrentUser(input: UpdateCurrentUserInput!): User!
  markNotificationsRead(notificationIds: [ID!]): [Notification]!

  createCustomer(input: CreateCustomerInput!): Customer!
  updateCustomer(input: UpdateCustomerInput!): Customer!

  createTask(input: CreateTaskInput!): Task!
  cancelTask(taskId: ID!): Task!
  completeTask(taskId: ID!): Task!

  createNote(input: CreateNoteInput!): Note!
  deleteNote(noteId: ID!): GenericActionResponse!

  getGooglePlacesInfo(googlePlaceIds: [ID!]): [GooglePlace]!
}

type Query {
  telemarketingSheet(input: TelemarketingSheetIdentifiers!): TelemarketingSheet
  telemarketingSheets: [TelemarketingSheet]
  currentUser: User
  argentinaAreaCodes(filter: String!): [ArgentinaAreaCodeMatch]!
}

type Subscription {
  notificationActivated: Notification!
}
